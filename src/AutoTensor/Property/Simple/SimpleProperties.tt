<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using System.Collections.Generic;

namespace AutoTensor.Property.Simple
{
<#
	string[] simpleTypes = new [] { 
		"sbyte", 
		"byte", 
		"short", 
		"ushort", 
		"int",
		"uint",
		"long",
		"char",
		"float",
		"ulong" };

	foreach(var item in simpleTypes)
	{
#>
	public class <#= ClassName(item) #> : IProperty<<#= item #>, float>
	{ 
	    public string Name { get; set; }

        public Type Type => typeof(<#= item #>);

        public int Position { get; set; }

        public int Length => 1;

        public IEnumerable<string> GetColumns()
        {
            yield return Name;
        }

        public void PostProcess(IEnumerable<<#= item #>> items) { }

        public void PostProcess(<#= item #> item) { }

        public void PreProcess(IEnumerable<<#= item #>> items) { }

        public void PreProcess(<#= item #> item) { }

        public <#= item #> ToSource(IEnumerable<float> values) => (<#= item #>)values.First();

        public IEnumerable<float> ToValue(<#= item #> source)
        {
            yield return (float)source;
        }
	}

<#
	}
#>
}
<#
 string ClassName(string name)  
 { return name[0].ToString().ToUpperInvariant() + name.Substring(1) + "Property"; }  
#>  